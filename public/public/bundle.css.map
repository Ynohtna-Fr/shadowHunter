{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\App.svelte",
    "..\\Card.svelte",
    "..\\Game.svelte",
    "..\\GameCreationForm.svelte",
    "..\\Host.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport Host from './host/Host.svelte';\n\timport Game from './game/Game.svelte';\n\n    let hostId = null;\n\tif (window.location.search) {\n        const urlParams = new URLSearchParams(window.location.search);\n        if (urlParams.has('game')) {\n            hostId = urlParams.get('game');\n        }\n\t}\n\n\tlet gameCreator = false;\n\n\tfunction onCreatedHost(ev) {\n\t\tgameCreator = true;\n\t\thostId = ev.detail;\n\t}\n</script>\n\n<style>\n\t.container {\n\t\theight: 100%;\n\t\twidth: 100%;\n\t}\n\t.container div {\n\t\tpadding: 10px;\n\t}\n\t.game-section {\n\t\tflex: 1;\n\t}\n</style>\n\n<div class=\"container\">\n\t{#if !hostId || gameCreator}\n\t\t<div class=\"host-section\">\n\t\t\t<Host on:createdHost={onCreatedHost}/>\n\t\t</div>\n\t{/if}\n\t\n\t{#if hostId}\n\t\t<div class=\"game-section\">\n\t\t\t<Game hostId={hostId}/>\n\t\t</div>\n\t{/if}\n</div>\n",
    "<script>\n    export let card = null;\n    let hasError = false;\n\n    $: {\n        card;\n        hasError = false;\n    }\n\n</script>\n\n<style>\n    .aspect-ratio-box {\n        height: 0;\n        overflow: hidden;\n        padding-top: calc(1406 / 991 * 100%);\n        position: relative;\n    }\n\n    .aspect-ratio-box-inside {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n    }\n\n    .no-data {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n    }\n\n    .no-data > span {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        font-size: 200%;\n        transform: translateX(-50%) translateY(-50%);\n    }\n\n    .shadow {\n        background-color: rgba(182, 13, 13);\n    }\n\n    .hunter {\n        background-color: rgba(38, 13, 182);\n        color: white;\n    }\n\n    .neutral {\n        background-color: rgba(245, 193, 22);\n    }\n\n    img {\n        max-width: 100%;\n        height: 100%;\n    }\n</style>\n\n<div class=\"aspect-ratio-box\">\n    <div class=\"aspect-ratio-box-inside\">\n        {#if !hasError}\n            <img\n             style=\"max-width: 100%; height: auto;\"\n             src={'cards/images/' + card.image} alt=\"card\" on:error={() => hasError = true} />\n        {:else}\n            <div\n                class=\"no-data\"\n                class:shadow={card.team === 'shadow'}\n                class:hunter={card.team === 'hunter'}\n                class:neutral={card.team === 'neutral'}>\n                <span>{card.name}</span>\n            </div>\n        {/if}\n    </div>\n</div>\n",
    "<script>\n    import PlayersList from './components/PlayersList.svelte';\n    import Card from '../display/Card.svelte';\n\n    import Peer from 'peerjs';\n    import { afterUpdate } from 'svelte';\n    import { removeNull } from '../utils.js'\n\n    export let hostId;\n\n    let connectionToHost = null;\n    let connectedToHostId = null;\n    let connecting = false;\n    let requestedName;\n\n    let players = [];\n    let card = null;\n    let reveal = null;\n\n    let connectingStatus = '';\n    let connectionError = '';\n\n    let peer;\n\n    async function connect() {\n        connecting = true;\n        connectingStatus = 'connecting to broking server...';\n        connectionError = '';\n        peer = await createPeer();\n        connectingStatus = 'connecting to host...';\n        connectionToHost = peer.connect(hostId);\n\n        connectionToHost.on('open', () => {\n            connectingStatus = '';\n            connecting = false;\n            connectedToHostId = hostId;\n            connectionToHost.send({\n                action: 'name',\n                data: {\n                    name: requestedName\n                }\n            });\n            connectionToHost.send({\n                request: 'players'\n            });\n        });\n\n        connectionToHost.on('data', (data) => {\n            console.log('data received', data);\n            if (data.type === 'players') {\n                players = data.data;\n            }\n            if (data.type === 'card') {\n                card = data.data;\n            }\n            if (data.type === 'reveal') {\n                handleReveal(data.data)\n            }\n        });\n\n        connectionToHost.on('close', () => {\n            console.log('disconnected');\n            connectionToHost = null;\n            connectedToHostId = null;\n            connectionError = 'Connection with host has been closed.';\n        });\n\n        connectionToHost.on('error', err => {\n            console.log('connection error', err);\n            connectionError = 'Connection error ' + err;\n        });\n    }\n\n    function createPeer() {\n        return new Promise((resolve) => {\n            const urlParams = new URLSearchParams(window.location.search);\n            const peerConfig = {\n                host: urlParams.get('brokingHost'),\n                port: urlParams.get('brokingPort'),\n                path: urlParams.get('brokingPath'),\n                key: urlParams.get('brokingKey')\n            };\n            removeNull(peerConfig);\n            console.log(peerConfig);\n            const newPeer = new Peer(peerConfig);\n            newPeer.on('open', () => {\n                resolve(newPeer);\n            })\n            newPeer.on('close', () => {\n                console.log('peer closed');\n                connectionToHost = null;\n                connectedToHostId = null;\n                peer = null;\n            })\n        });\n    }\n\n    function forceReconnect() {\n        connectionToHost.send({\n                action: 'leave'\n        });\n        setTimeout(() => {\n            if (connectionToHost) {\n                connectionToHost.close();\n            }\n            if (peer) {\n                peer.destroy();\n            }\n            connect();\n        }, 50);\n    }\n\n    function sendReveal() {\n      connectionToHost.send({\n        action: 'reveal',\n        data: {\n          player: requestedName,\n          card: card\n        }\n      })\n\n      reveal = card.team\n    }\n\n    function handleReveal(data) {\n        const [revealPlayer] = players.filter(p => p.name === data.player)\n        const textTeam = document.querySelector(`#player-${revealPlayer.playerId} span`)\n        textTeam.classList.add(data.card.team)\n        textTeam.innerText = data.card.team\n        document.querySelector(`#player-${revealPlayer.playerId} img`).src = 'cards/images/' + data.card.imageFallbacks\n    }\n</script>\n\n<style>\n    .horizontal-flex {\n        display: flex;\n        flex-direction: row;\n    }\n\n    .flex-1 {\n        flex: 1;\n    }\n\n    h1 > button {\n        font-size: 0.5em;\n        margin: 0;\n    }\n\n    .error {\n        color: rgb(153, 13, 13);\n    }\n\n    .limit-width {\n        max-width: 500px;\n    }\n</style>\n\n<h1>\n    Shadow Hunters\n    {#if connectedToHostId || connecting}\n        <button on:click={forceReconnect}>Force reconnect</button>\n    {/if}\n</h1>\n\n{#if !connectedToHostId}\n    <div>\n        <input bind:value={requestedName}>\n        <button\n            on:click={connect}\n            disabled={connecting}>\n            Pick a name\n        </button>\n    </div>\n\n    {#if connectingStatus}\n        <p>{connectingStatus}</p>\n    {/if}\n{/if}\n\n{#if connectionError}\n    <p class=\"error\">{connectionError}</p>\n{/if}\n\n{#if connectedToHostId}\n    <div class=\"horizontal-flex\">\n        <div class=\"flex-1\">\n            <PlayersList {players} />\n        </div>\n    </div>\n{/if}\n\n{#if card && reveal == null}\n    <div>\n        <button\n        on:click={sendReveal}\n        >Se révéler au grand jour</button>\n    </div>\n{/if}\n\n{#if card}\n    <div class=\"limit-width\">\n        <hr>\n        <h2>Votre carte :</h2>\n        <Card {card} />\n    </div>\n{/if}\n",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  import { cardsStore } from '../cards-store';\n  import Card from '../display/Card.svelte';\n  export let players = [];\n\n  const dispatch = createEventDispatcher();\n\n  let shadowHunters;\n  let shadowHuntersChoices;\n  let cards = [];\n  let playableCards = [];\n  let showCards = true;\n  let preventReplayingSameCards = true;\n  let availableDecks = []\n  let deck = 'base'\n  let allCards\n\n  cardsStore.subscribe(c => {\n    allCards = c;\n    availableDecks = Object.keys(c)\n    if (availableDecks.length > 0) {\n      playableCards = allCards['base']\n      cards = allCards['base']\n    }\n  })\n\n  function handleDeckChange() {\n    cards = allCards[deck]\n    if (!localStorage.getItem('removedCards')) {\n      playableCards = [...cards];\n    } else {\n      const removedCardsNames = JSON.parse(localStorage.getItem('removedCards'));\n      playableCards = cards.filter(card => !removedCardsNames.includes(card.name));\n    }\n    console.log('change', playableCards)\n  }\n\n  $: neutrals = players.length - shadowHunters * 2;\n\n  $: {\n    players;\n    playersUpdated();\n  }\n\n  function playersUpdated() {\n    shadowHuntersChoices = [...Array(Math.floor(players.length / 2) + 1).keys()];\n  }\n\n  function submit() {\n    console.log('sub', playableCards)\n    dispatch('gameCreated', {\n      shadowHunters,\n      cards: playableCards,\n      preventReplayingSameCards\n    })\n\n  }\n\n  function toggleCard(card) {\n    if (playableCards.findIndex(c => c.name === card.name) > -1) {\n      playableCards.splice(playableCards.findIndex(c => c.name === card.name), 1);\n      playableCards = [...playableCards];\n    } else {\n      playableCards = [...playableCards, card];\n    }\n    localStorage.setItem(\n      'removedCards',\n      JSON.stringify(cards.map(c => c.name).filter(cardName => !playableCards.map(c => c.name).includes(cardName)))\n    );\n  }\n</script>\n\n<style>\n    .inline {\n        display: inline-block;\n    }\n\n    .medium-card {\n        width: 300px;\n        display: inline-block;\n    }\n\n    .removed-card {\n        opacity: 0.6;\n    }\n</style>\n\n<p>Nombre de joueurs : {players.length}</p>\n\n<form>\n    <div>\n        <label class=\"inline\">Shadow & Hunters count</label>\n        <select bind:value={shadowHunters} class=\"inline\">\n            {#each shadowHuntersChoices as choice}\n                <option value={choice}>{choice}</option>\n            {/each}\n        </select>\n    </div>\n\n    <div>\n        <label class=\"inline\">Neutral count</label>\n        <span>{neutrals}</span>\n    </div>\n\n    <div>\n        <label class=\"inline\">Ne pas rejouer les mêmes personnages 2 fois de suite</label>\n        <input type=\"checkbox\" bind:checked={preventReplayingSameCards}>\n    </div>\n\n    <div>\n        <label class=\"inline\">Deck à utiliser :</label>\n        <select bind:value={deck} on:change={handleDeckChange} class=\"inline\">\n            {#if availableDecks}\n                {#each availableDecks as choice}\n                    <option value={choice}>{choice}</option>\n                {/each}\n            {/if}\n        </select>\n    </div>\n\n    <button type=\"button\" on:click={submit}>Start game !</button>\n\n    <h2>Liste des personnages <i class=\"{showCards ? 'gg-chevron-down' : 'gg-chevron-up'}\" on:click={() => showCards = !showCards}></i></h2>\n    <div style=\"display: flex; flex-wrap: wrap; justify-content: space-around;\">\n        {#if showCards}\n            {#each cards as card}\n                <div\n                        style=\"max-width: calc((100% - 10px) / 4)\"\n                        class=\"medium-card\"\n                        on:click={() => toggleCard(card)}\n                        class:removed-card={playableCards.findIndex(c => c.name === card.name) === -1}>\n                    <Card {card}/>\n                </div>\n            {/each}\n        {/if}\n    </div>\n</form>\n",
    "<script>\n    import { PeerHost } from '../peer-host';\n    import { createEventDispatcher } from 'svelte';\n    import GameCreationForm from './GameCreationForm.svelte'\n\n    const dispatch = createEventDispatcher();\n    const host = new PeerHost();\n    let hostId;\n    let players = [];\n\n    let brokingHost;\n    let brokingPort;\n    let brokingPath;\n    let brokingKey;\n\n\n    function createGameHost() {\n        host.start({\n            debug: 2,\n            host: brokingHost,\n            port: brokingPort,\n            path: brokingPath,\n            key: brokingKey\n        }).then(id => { \n            hostId = id;\n            dispatch('createdHost', id);\n        });\n\n        host.players$.subscribe(p => {\n            players = p;\n        });\n    }\n\n    function restartGame() {\n        host.resetGame();\n    }\n\n    function onGameCreated(event) {\n        host.startGame(event.detail)\n    }\n\n    function removePlayer(player) {\n        host.removePlayer(player);\n    }\n\n    function generateUrlParam(key, value) {\n        if (value) {\n            return  `&${key}=${value}`; \n        }\n        return '';\n    }\n\n    $: sharableLink = window.location.origin \n        + '/?game=' + hostId \n        + generateUrlParam('brokingHost', brokingHost) \n        + generateUrlParam('brokingPort', brokingPort) \n        + generateUrlParam('brokingPath', brokingPath) \n        + generateUrlParam('brokingKey', brokingKey);\n</script>\n\n<style>\n    .gg-close {\n        color: red;\n        cursor: pointer;\n    }\n</style>\n\n<h1>Host</h1>\n\n{#if !hostId}\n    <button on:click={createGameHost}>Create a host server and start game</button>\n    <h2>Broking server options</h2>\n    <label>Host</label>\n    <input bind:value={brokingHost} />\n    <label>Port</label>\n    <input bind:value={brokingPort}/>\n    <label>Path</label>\n    <input bind:value={brokingPath}/>\n    <label>Key</label>\n    <input bind:value={brokingKey}/>\n{:else}\n    <button on:click={restartGame}>Restart the game</button>\n    <p>Share this link to the players : <a href={sharableLink} target=\"_blank\">{sharableLink}</a></p>\n\n    <h2>Liste des joueurs</h2>\n\n    <table>\n        <tbody>\n            {#each players as player}\n                <tr>\n                    <td>{player.name}</td>\n                    <td on:click={() => removePlayer(player)}>\n                        <i class=\"gg-close\"></i>\n                    </td>\n                </tr> \n            {/each}\n        </tbody>\n    </table>\n\n    <h2>Création de la partie</h2>\n    <GameCreationForm {players} on:gameCreated={onGameCreated}/>\n{/if}"
  ],
  "names": [],
  "mappings": "AAqBC,UAAU,4BAAC,CAAC,AACX,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,AACZ,CAAC,AACD,wBAAU,CAAC,GAAG,cAAC,CAAC,AACf,OAAO,CAAE,IAAI,AACd,CAAC,AACD,aAAa,4BAAC,CAAC,AACd,IAAI,CAAE,CAAC,AACR,CAAC;AClBE,iBAAiB,8BAAC,CAAC,AACf,MAAM,CAAE,CAAC,CACT,QAAQ,CAAE,MAAM,CAChB,WAAW,CAAE,KAAK,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CACpC,QAAQ,CAAE,QAAQ,AACtB,CAAC,AAED,wBAAwB,8BAAC,CAAC,AACtB,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AAChB,CAAC,AAED,QAAQ,8BAAC,CAAC,AACN,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AAChB,CAAC,AAED,uBAAQ,CAAG,IAAI,eAAC,CAAC,AACb,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,SAAS,CAAE,IAAI,CACf,SAAS,CAAE,WAAW,IAAI,CAAC,CAAC,WAAW,IAAI,CAAC,AAChD,CAAC,AAED,OAAO,8BAAC,CAAC,AACL,gBAAgB,CAAE,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,AACvC,CAAC,AAED,OAAO,8BAAC,CAAC,AACL,gBAAgB,CAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CACnC,KAAK,CAAE,KAAK,AAChB,CAAC,AAED,QAAQ,8BAAC,CAAC,AACN,gBAAgB,CAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,AACxC,CAAC,AAED,GAAG,8BAAC,CAAC,AACD,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,IAAI,AAChB,CAAC;AC2ED,gBAAgB,8BAAC,CAAC,AACd,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,AACvB,CAAC,AAED,OAAO,8BAAC,CAAC,AACL,IAAI,CAAE,CAAC,AACX,CAAC,AAED,iBAAE,CAAG,MAAM,eAAC,CAAC,AACT,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,AACb,CAAC,AAED,MAAM,8BAAC,CAAC,AACJ,KAAK,CAAE,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,AAC3B,CAAC,AAED,YAAY,8BAAC,CAAC,AACV,SAAS,CAAE,KAAK,AACpB,CAAC;AChFD,OAAO,eAAC,CAAC,AACL,OAAO,CAAE,YAAY,AACzB,CAAC,AAED,YAAY,eAAC,CAAC,AACV,KAAK,CAAE,KAAK,CACZ,OAAO,CAAE,YAAY,AACzB,CAAC,AAED,aAAa,eAAC,CAAC,AACX,OAAO,CAAE,GAAG,AAChB,CAAC;ACxBD,SAAS,cAAC,CAAC,AACP,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,OAAO,AACnB,CAAC"
}